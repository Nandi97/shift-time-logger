// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma\"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum LocationType {
  WAREHOUSE
  OUTLET
  ONLINE
  VIRTUAL // e.g., INTERNAL_USE, IN_TRANSIT
}

enum TxnType {
  RECEIVE // into Warehouse (purchase, restock)
  TRANSFER_OUT // leaving a location (to another)
  TRANSFER_IN // arriving at a location (from another)
  SALE // online sale (reduce Warehouse or Online location)
  RETURN_IN // returned from outlet/customer back to Warehouse
  ADJUSTMENT // manual correction
  WRITE_OFF // expired/damaged discard
  CONSUME_INTERNAL // practice/internal use
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  inventoryTxn InventoryTxn[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model WorkLog {
  id             Int       @id @default(autoincrement())
  userEmail      String
  userName       String
  action         String // "Entry" | "Exit" | "LunchStart" | "LunchEnd"
  timestamp      DateTime  @default(now()) // server time
  clientTime     DateTime? // optional: client-submitted local time
  latitude       Float?
  longitude      Float?
  accuracyMeters Float?
  distanceMeters Float? // distance from site center (m)
  withinGeofence Boolean? // computed boolean
  userAgent      String?
  ip             String?

  // NEW: local calendar day from the client, e.g. "2025-08-13"
  dayKey String @default("")

  @@index([userEmail, timestamp])
}

// --------------------
// Notes for Postgres migration:
// 1) Change datasource provider to postgresql
// 2) Update DATABASE_URL
// 3) Run `prisma migrate dev` to generate a new migration for PG

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Location {
  id        String         @id @default(cuid())
  name      String
  type      LocationType
  code      String         @unique // e.g., WH, OUT-QUEEN, ONLINE
  active    Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  // optional address fields if needed
  txnsFrom  InventoryTxn[] @relation("fromLocation")
  txnsTo    InventoryTxn[] @relation("toLocation")
}

model Product {
  id          String         @id @default(cuid())
  sku         String         @unique // your internal SKU (print when no barcode)
  name        String
  brandId     String?
  brand       Brand?         @relation(fields: [brandId], references: [id])
  categoryId  String?
  category    Category?      @relation(fields: [categoryId], references: [id])
  // barcodes
  barcodeUnit String?        @unique
  barcodePack String?        @unique
  packSize    Int? // e.g., 6 units per pack
  // flags
  trackExpiry Boolean        @default(false) // set true for items with shelf-life
  imageUrl    String? // ← ensure this is present
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  txns        InventoryTxn[]
}

// Ledger rows; positive qty always represents the “moved amount”.
// Direction is expressed via fromLocationId/toLocationId.
// Stock(location) = Σ qty INTO location (toLocation) − Σ qty OUT OF location (fromLocation).
model InventoryTxn {
  id        String   @id @default(cuid())
  ts        DateTime @default(now()) // stored UTC
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  fromLocationId String? // nullable when RECEIVE/CONSUME_INTERNAL/etc.
  fromLocation   Location? @relation("fromLocation", fields: [fromLocationId], references: [id])

  toLocationId String? // nullable when WRITE_OFF/etc.
  toLocation   Location? @relation("toLocation", fields: [toLocationId], references: [id])

  qtyUnits      Int // in *base units* (not packs); convert on input when scanning a pack
  type          TxnType
  reason        String? // human-friendly reason/category: "Delivery to Queen St", "Practice", "Expired", order number, etc.
  performedById String? // user who did it (you)
  performedBy   User?   @relation(fields: [performedById], references: [id])

  // Optional lot/expiry captured per movement
  lotCode    String?
  expiryDate DateTime?

  // extra metadata (links to Shopify/Order/Doc, outlet name, etc.)
  ref   String?
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, ts])
  @@index([fromLocationId, toLocationId, ts])
  @@index([lotCode, expiryDate])
}
